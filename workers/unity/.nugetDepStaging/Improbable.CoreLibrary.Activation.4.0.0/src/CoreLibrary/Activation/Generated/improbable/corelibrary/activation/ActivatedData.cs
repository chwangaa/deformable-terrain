// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelibrary.activation.ActivatedData in improbable/corelibrary/activation/activated.proto.

namespace Improbable.Corelibrary.Activation
{
public struct ActivatedData : global::System.IEquatable<ActivatedData>
{
    public readonly bool IsActive;
    public readonly bool ActivateRequested;
    public readonly int ActivationCallbacksPending;

    public ActivatedData (bool isActive,
        bool activateRequested,
        int activationCallbacksPending)
    {
        IsActive = isActive;
        ActivateRequested = activateRequested;
        ActivationCallbacksPending = activationCallbacksPending;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is ActivatedData))
            return false;
        return Equals((ActivatedData) obj);
    }

    public static bool operator ==(ActivatedData obj1, ActivatedData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(ActivatedData obj1, ActivatedData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(ActivatedData obj)
    {
        return true
            && IsActive.Equals(obj.IsActive)
            && ActivateRequested.Equals(obj.ActivateRequested)
            && ActivationCallbacksPending.Equals(obj.ActivationCallbacksPending);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + IsActive.GetHashCode();
        res = (res * 977) + ActivateRequested.GetHashCode();
        res = (res * 977) + ActivationCallbacksPending.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class ActivatedDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelibrary.Activation.ActivatedData, Schema.Improbable.Corelibrary.Activation.ActivatedData>
{
    static readonly ActivatedDataHelper _instance = new ActivatedDataHelper();
    public static ActivatedDataHelper Instance { get { return _instance; } }
    private ActivatedDataHelper() {}

    public Schema.Improbable.Corelibrary.Activation.ActivatedData ToProto(Improbable.Corelibrary.Activation.ActivatedData data)
    {
        var proto = new Schema.Improbable.Corelibrary.Activation.ActivatedData();
        proto.IsActive = data.IsActive;
        proto.ActivateRequested = data.ActivateRequested;
        proto.ActivationCallbacksPending = data.ActivationCallbacksPending;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelibrary.Activation.ActivatedData MergeFromProto(Schema.Improbable.Corelibrary.Activation.ActivatedData proto, bool[] statesToClear, Improbable.Corelibrary.Activation.ActivatedData data)
    {
        return new Improbable.Corelibrary.Activation.ActivatedData(
            proto.IsActiveSpecified ? proto.IsActive : data.IsActive,
            proto.ActivateRequestedSpecified ? proto.ActivateRequested : data.ActivateRequested,
            proto.ActivationCallbacksPendingSpecified ? proto.ActivationCallbacksPending : data.ActivationCallbacksPending
        );
    }

    public Improbable.Corelibrary.Activation.ActivatedData FromProto(Schema.Improbable.Corelibrary.Activation.ActivatedData proto)
    {
        return new Improbable.Corelibrary.Activation.ActivatedData(
            proto.IsActive,
            proto.ActivateRequested,
            proto.ActivationCallbacksPending
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelibrary.Activation.ActivatedData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelibrary.Activation.ActivatedData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.IsActiveSpecified)
        {
            protoTo.IsActive = protoFrom.IsActive;
            protoTo.IsActiveSpecified = protoFrom.IsActiveSpecified;
        }
        if (protoFrom.ActivateRequestedSpecified)
        {
            protoTo.ActivateRequested = protoFrom.ActivateRequested;
            protoTo.ActivateRequestedSpecified = protoFrom.ActivateRequestedSpecified;
        }
        if (protoFrom.ActivationCallbacksPendingSpecified)
        {
            protoTo.ActivationCallbacksPending = protoFrom.ActivationCallbacksPending;
            protoTo.ActivationCallbacksPendingSpecified = protoFrom.ActivationCallbacksPendingSpecified;
        }
    }
}
}
