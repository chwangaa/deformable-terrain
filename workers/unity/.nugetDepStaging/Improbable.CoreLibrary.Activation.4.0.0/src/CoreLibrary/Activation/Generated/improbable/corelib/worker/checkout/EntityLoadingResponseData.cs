// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelib.worker.checkout.EntityLoadingResponseData in improbable/corelib/worker/checkout/entity_loading_response.proto.

namespace Improbable.Corelib.Worker.Checkout
{
public struct EntityLoadingResponseData : global::System.IEquatable<EntityLoadingResponseData>
{
    public readonly bool Loaded;

    public EntityLoadingResponseData (bool loaded)
    {
        Loaded = loaded;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is EntityLoadingResponseData))
            return false;
        return Equals((EntityLoadingResponseData) obj);
    }

    public static bool operator ==(EntityLoadingResponseData obj1, EntityLoadingResponseData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(EntityLoadingResponseData obj1, EntityLoadingResponseData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(EntityLoadingResponseData obj)
    {
        return true
            && Loaded.Equals(obj.Loaded);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + Loaded.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class EntityLoadingResponseDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData, Schema.Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData>
{
    static readonly EntityLoadingResponseDataHelper _instance = new EntityLoadingResponseDataHelper();
    public static EntityLoadingResponseDataHelper Instance { get { return _instance; } }
    private EntityLoadingResponseDataHelper() {}

    public Schema.Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData ToProto(Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData data)
    {
        var proto = new Schema.Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData();
        proto.Loaded = data.Loaded;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData MergeFromProto(Schema.Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData proto, bool[] statesToClear, Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData data)
    {
        return new Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData(
            proto.LoadedSpecified ? proto.Loaded : data.Loaded
        );
    }

    public Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData FromProto(Schema.Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData proto)
    {
        return new Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData(
            proto.Loaded
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelib.Worker.Checkout.EntityLoadingResponseData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.LoadedSpecified)
        {
            protoTo.Loaded = protoFrom.Loaded;
            protoTo.LoadedSpecified = protoFrom.LoadedSpecified;
        }
    }
}
}
