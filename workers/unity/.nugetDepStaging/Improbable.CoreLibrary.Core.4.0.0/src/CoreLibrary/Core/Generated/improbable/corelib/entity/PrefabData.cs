// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelib.entity.PrefabData in improbable/corelib/entity/prefab.proto.

namespace Improbable.Corelib.Entity
{
public struct PrefabData : global::System.IEquatable<PrefabData>
{
    public readonly string Name;

    public PrefabData (string name)
    {
        Name = name;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is PrefabData))
            return false;
        return Equals((PrefabData) obj);
    }

    public static bool operator ==(PrefabData obj1, PrefabData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(PrefabData obj1, PrefabData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(PrefabData obj)
    {
        return true
            && string.Equals(Name, obj.Name);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + (Name != null ? Name.GetHashCode() : 0);
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class PrefabDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelib.Entity.PrefabData, Schema.Improbable.Corelib.Entity.PrefabData>
{
    static readonly PrefabDataHelper _instance = new PrefabDataHelper();
    public static PrefabDataHelper Instance { get { return _instance; } }
    private PrefabDataHelper() {}

    public Schema.Improbable.Corelib.Entity.PrefabData ToProto(Improbable.Corelib.Entity.PrefabData data)
    {
        var proto = new Schema.Improbable.Corelib.Entity.PrefabData();
        proto.Name = data.Name;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelib.Entity.PrefabData MergeFromProto(Schema.Improbable.Corelib.Entity.PrefabData proto, bool[] statesToClear, Improbable.Corelib.Entity.PrefabData data)
    {
        return new Improbable.Corelib.Entity.PrefabData(
            proto.NameSpecified ? proto.Name : data.Name
        );
    }

    public Improbable.Corelib.Entity.PrefabData FromProto(Schema.Improbable.Corelib.Entity.PrefabData proto)
    {
        return new Improbable.Corelib.Entity.PrefabData(
            proto.Name
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelib.Entity.PrefabData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelib.Entity.PrefabData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.NameSpecified)
        {
            protoTo.Name = protoFrom.Name;
            protoTo.NameSpecified = protoFrom.NameSpecified;
        }
    }
}
}
