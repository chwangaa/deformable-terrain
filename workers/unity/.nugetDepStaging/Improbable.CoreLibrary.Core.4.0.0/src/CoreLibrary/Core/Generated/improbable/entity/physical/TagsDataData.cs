// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.entity.physical.TagsDataData in improbable/entity/physical/tags_data.proto.

namespace Improbable.Entity.Physical
{
public struct TagsDataData : global::System.IEquatable<TagsDataData>
{
    public readonly global::Improbable.Util.Collections.IReadOnlyList<string> Tags;

    public TagsDataData (global::Improbable.Util.Collections.IReadOnlyList<string> tags)
    {
        Tags = tags;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is TagsDataData))
            return false;
        return Equals((TagsDataData) obj);
    }

    public static bool operator ==(TagsDataData obj1, TagsDataData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(TagsDataData obj1, TagsDataData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(TagsDataData obj)
    {
        return true
            && global::Improbable.Util.Collections.CollectionUtil.ListsEqual(Tags, obj.Tags);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + (Tags != null ? Tags.GetHashCode() : 0);
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class TagsDataDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Entity.Physical.TagsDataData, Schema.Improbable.Entity.Physical.TagsDataData>
{
    static readonly TagsDataDataHelper _instance = new TagsDataDataHelper();
    public static TagsDataDataHelper Instance { get { return _instance; } }
    private TagsDataDataHelper() {}

    public Schema.Improbable.Entity.Physical.TagsDataData ToProto(Improbable.Entity.Physical.TagsDataData data)
    {
        var proto = new Schema.Improbable.Entity.Physical.TagsDataData();
        global::Improbable.Tools.ToProto<string, string>(data.Tags, proto.Tags);
        return proto;
    }

    //Shallow merge method
    public Improbable.Entity.Physical.TagsDataData MergeFromProto(Schema.Improbable.Entity.Physical.TagsDataData proto, bool[] statesToClear, Improbable.Entity.Physical.TagsDataData data)
    {
        return new Improbable.Entity.Physical.TagsDataData(
            (proto.Tags.Count > 0 || statesToClear != null && statesToClear[0]) ? global::Improbable.Tools.FromProto<string, string>(proto.Tags) : data.Tags
        );
    }

    public Improbable.Entity.Physical.TagsDataData FromProto(Schema.Improbable.Entity.Physical.TagsDataData proto)
    {
        return new Improbable.Entity.Physical.TagsDataData(
            global::Improbable.Tools.FromProto<string, string>(proto.Tags)
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Entity.Physical.TagsDataData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Entity.Physical.TagsDataData protoTo, bool[] statesToClearTo)
    {
        if ((protoFrom.Tags.Count > 0 || statesToClearFrom != null && statesToClearFrom[0]))
        {
            statesToClearTo[0] = statesToClearFrom[0];
            protoTo.Tags.Clear();
            protoTo.Tags.AddRange(protoFrom.Tags);
        }
    }
}
}
