// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelib.physical.PhysicalityData in improbable/corelib/physical/physicality.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Corelib.Physical
{
[ReaderInterface]
[CanonicalName("improbable.corelib.physical.Physicality")]
public interface PhysicalityReader : IEntityStateReader
{
    bool IsPhysical { get; }

    event System.Action<bool> IsPhysicalUpdated;
}

public interface IPhysicalityUpdater : IEntityStateUpdater
{
    void FinishAndSend();
    IPhysicalityUpdater IsPhysical(bool newValue);
}

[WriterInterface]
[CanonicalName("improbable.corelib.physical.Physicality")]
public interface PhysicalityWriter : PhysicalityReader, IUpdateable<IPhysicalityUpdater> { }

public class Physicality : global::Improbable.Entity.State.StateBase<Improbable.Corelib.Physical.PhysicalityData, Schema.Improbable.Corelib.Physical.PhysicalityData>, PhysicalityWriter, IPhysicalityUpdater
{
    public Physicality(global::Improbable.EntityId entityId, Improbable.Corelib.Physical.PhysicalityData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Corelib.Physical.PhysicalityDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(Physicality));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    public bool IsPhysical { get { return Data.IsPhysical; } }

    private readonly global::System.Collections.Generic.List<System.Action<bool>> updatedCallbacksIsPhysical =
        new global::System.Collections.Generic.List<System.Action<bool>>();
    public event System.Action<bool> IsPhysicalUpdated
    {
        add
        {
            updatedCallbacksIsPhysical.Add(value);
            value(Data.IsPhysical);
        }
        remove { updatedCallbacksIsPhysical.Remove(value); }
    }

    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
        UnsubscribeEventHandler(visualizer, updatedCallbacksIsPhysical);
    }

    public IPhysicalityUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new PhysicalityUpdate(EntityId, new bool[0], new Schema.Improbable.Corelib.Physical.PhysicalityData());
            }
            return this;
        }
    }

    IPhysicalityUpdater IPhysicalityUpdater.IsPhysical(bool newValue)
    {
        if (Updater.Proto.IsPhysicalSpecified || !IsPhysical.Equals(newValue))
        {
            Updater.Proto.IsPhysical = newValue;
        }
        return this;
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Corelib.Physical.PhysicalityData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        bool updatedIsPhysical = update.IsPhysicalSpecified;
        anythingUpdated |= updatedIsPhysical;
        if (updatedIsPhysical) TriggerCallbacks(updatedCallbacksIsPhysical, Data.IsPhysical);

        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Corelib.Physical.PhysicalityData stateUpdate)
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }
}

public class PhysicalityUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Corelib.Physical.PhysicalityData, Schema.Improbable.Corelib.Physical.PhysicalityData>
{
    public const int STATE_UPDATE_FIELD_ID = 190105;
    public PhysicalityUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Corelib.Physical.PhysicalityData proto)
        : base(entityId, statesToClear, Improbable.Corelib.Physical.PhysicalityDataHelper.Instance, proto, STATE_UPDATE_FIELD_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new Physicality(entityId, GetData(), stateSender);
    }

    public static PhysicalityUpdate ExtractFrom(global::Improbable.Protocol.StateUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Corelib.Physical.PhysicalityData>(proto.EntityState, STATE_UPDATE_FIELD_ID);
        return new PhysicalityUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), null, protoState);
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = {};
}
}
