// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelib.util.EntityOwnerData in improbable/corelib/util/entity_owner.proto.

namespace Improbable.Corelib.Util
{
public struct EntityOwnerData : global::System.IEquatable<EntityOwnerData>
{
    public readonly string OwnerId;

    public EntityOwnerData (string ownerId)
    {
        OwnerId = ownerId;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is EntityOwnerData))
            return false;
        return Equals((EntityOwnerData) obj);
    }

    public static bool operator ==(EntityOwnerData obj1, EntityOwnerData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(EntityOwnerData obj1, EntityOwnerData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(EntityOwnerData obj)
    {
        return true
            && string.Equals(OwnerId, obj.OwnerId);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + (OwnerId != null ? OwnerId.GetHashCode() : 0);
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class EntityOwnerDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelib.Util.EntityOwnerData, Schema.Improbable.Corelib.Util.EntityOwnerData>
{
    static readonly EntityOwnerDataHelper _instance = new EntityOwnerDataHelper();
    public static EntityOwnerDataHelper Instance { get { return _instance; } }
    private EntityOwnerDataHelper() {}

    public Schema.Improbable.Corelib.Util.EntityOwnerData ToProto(Improbable.Corelib.Util.EntityOwnerData data)
    {
        var proto = new Schema.Improbable.Corelib.Util.EntityOwnerData();
        proto.OwnerId = data.OwnerId;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelib.Util.EntityOwnerData MergeFromProto(Schema.Improbable.Corelib.Util.EntityOwnerData proto, bool[] statesToClear, Improbable.Corelib.Util.EntityOwnerData data)
    {
        return new Improbable.Corelib.Util.EntityOwnerData(
            (proto.OwnerIdSpecified || statesToClear != null && statesToClear[0]) ? (!proto.OwnerIdSpecified ? null : proto.OwnerId) : data.OwnerId
        );
    }

    public Improbable.Corelib.Util.EntityOwnerData FromProto(Schema.Improbable.Corelib.Util.EntityOwnerData proto)
    {
        return new Improbable.Corelib.Util.EntityOwnerData(
            !proto.OwnerIdSpecified ? null : proto.OwnerId
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelib.Util.EntityOwnerData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelib.Util.EntityOwnerData protoTo, bool[] statesToClearTo)
    {
        if ((protoFrom.OwnerIdSpecified || statesToClearFrom != null && statesToClearFrom[0]))
        {
            statesToClearTo[0] = statesToClearFrom[0];
            protoTo.OwnerId = protoFrom.OwnerId;
            protoTo.OwnerIdSpecified = protoFrom.OwnerIdSpecified;
        }
    }
}
}
