// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.entity.physical.PhysicsSimulationData in improbable/entity/physical/physics_simulation.proto.

namespace Improbable.Entity.Physical
{
public struct PhysicsSimulationData : global::System.IEquatable<PhysicsSimulationData>
{
    public readonly Improbable.Entity.Physical.PhysicsSimulationData.PhysicsStrategy Strategy;
    public readonly string OwnerId;

    public PhysicsSimulationData (Improbable.Entity.Physical.PhysicsSimulationData.PhysicsStrategy strategy,
        string ownerId)
    {
        Strategy = strategy;
        OwnerId = ownerId;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is PhysicsSimulationData))
            return false;
        return Equals((PhysicsSimulationData) obj);
    }

    public static bool operator ==(PhysicsSimulationData obj1, PhysicsSimulationData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(PhysicsSimulationData obj1, PhysicsSimulationData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(PhysicsSimulationData obj)
    {
        return true
            && Strategy.Equals(obj.Strategy)
            && string.Equals(OwnerId, obj.OwnerId);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + Strategy.GetHashCode();
        res = (res * 977) + (OwnerId != null ? OwnerId.GetHashCode() : 0);
        return res;
    }

    public enum PhysicsStrategy {
        Simulated = 0,
        Exists = 1,
        None = 2
    }
}

//For internal use only, not to be used in user code.
public sealed class PhysicsSimulationDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Entity.Physical.PhysicsSimulationData, Schema.Improbable.Entity.Physical.PhysicsSimulationData>
{
    static readonly PhysicsSimulationDataHelper _instance = new PhysicsSimulationDataHelper();
    public static PhysicsSimulationDataHelper Instance { get { return _instance; } }
    private PhysicsSimulationDataHelper() {}

    public Schema.Improbable.Entity.Physical.PhysicsSimulationData ToProto(Improbable.Entity.Physical.PhysicsSimulationData data)
    {
        var proto = new Schema.Improbable.Entity.Physical.PhysicsSimulationData();
        proto.Strategy = (Schema.Improbable.Entity.Physical.PhysicsSimulationData.PhysicsStrategy) data.Strategy;
        proto.OwnerId = data.OwnerId;
        return proto;
    }

    //Shallow merge method
    public Improbable.Entity.Physical.PhysicsSimulationData MergeFromProto(Schema.Improbable.Entity.Physical.PhysicsSimulationData proto, bool[] statesToClear, Improbable.Entity.Physical.PhysicsSimulationData data)
    {
        return new Improbable.Entity.Physical.PhysicsSimulationData(
            proto.StrategySpecified ? (Improbable.Entity.Physical.PhysicsSimulationData.PhysicsStrategy) proto.Strategy : data.Strategy,
            (proto.OwnerIdSpecified || statesToClear != null && statesToClear[0]) ? (!proto.OwnerIdSpecified ? null : proto.OwnerId) : data.OwnerId
        );
    }

    public Improbable.Entity.Physical.PhysicsSimulationData FromProto(Schema.Improbable.Entity.Physical.PhysicsSimulationData proto)
    {
        return new Improbable.Entity.Physical.PhysicsSimulationData(
            (Improbable.Entity.Physical.PhysicsSimulationData.PhysicsStrategy) proto.Strategy,
            !proto.OwnerIdSpecified ? null : proto.OwnerId
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Entity.Physical.PhysicsSimulationData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Entity.Physical.PhysicsSimulationData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.StrategySpecified)
        {
            protoTo.Strategy = protoFrom.Strategy;
            protoTo.StrategySpecified = protoFrom.StrategySpecified;
        }
        if ((protoFrom.OwnerIdSpecified || statesToClearFrom != null && statesToClearFrom[0]))
        {
            statesToClearTo[0] = statesToClearFrom[0];
            protoTo.OwnerId = protoFrom.OwnerId;
            protoTo.OwnerIdSpecified = protoFrom.OwnerIdSpecified;
        }
    }
}
}
