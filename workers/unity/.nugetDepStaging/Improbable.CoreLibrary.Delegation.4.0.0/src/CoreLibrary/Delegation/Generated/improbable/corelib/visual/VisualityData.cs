// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelib.visual.VisualityData in improbable/corelib/visual/visuality.proto.

namespace Improbable.Corelib.Visual
{
public struct VisualityData : global::System.IEquatable<VisualityData>
{
    public readonly bool IsVisual;

    public VisualityData (bool isVisual)
    {
        IsVisual = isVisual;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is VisualityData))
            return false;
        return Equals((VisualityData) obj);
    }

    public static bool operator ==(VisualityData obj1, VisualityData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(VisualityData obj1, VisualityData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(VisualityData obj)
    {
        return true
            && IsVisual.Equals(obj.IsVisual);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + IsVisual.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class VisualityDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelib.Visual.VisualityData, Schema.Improbable.Corelib.Visual.VisualityData>
{
    static readonly VisualityDataHelper _instance = new VisualityDataHelper();
    public static VisualityDataHelper Instance { get { return _instance; } }
    private VisualityDataHelper() {}

    public Schema.Improbable.Corelib.Visual.VisualityData ToProto(Improbable.Corelib.Visual.VisualityData data)
    {
        var proto = new Schema.Improbable.Corelib.Visual.VisualityData();
        proto.IsVisual = data.IsVisual;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelib.Visual.VisualityData MergeFromProto(Schema.Improbable.Corelib.Visual.VisualityData proto, bool[] statesToClear, Improbable.Corelib.Visual.VisualityData data)
    {
        return new Improbable.Corelib.Visual.VisualityData(
            proto.IsVisualSpecified ? proto.IsVisual : data.IsVisual
        );
    }

    public Improbable.Corelib.Visual.VisualityData FromProto(Schema.Improbable.Corelib.Visual.VisualityData proto)
    {
        return new Improbable.Corelib.Visual.VisualityData(
            proto.IsVisual
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelib.Visual.VisualityData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelib.Visual.VisualityData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.IsVisualSpecified)
        {
            protoTo.IsVisual = protoFrom.IsVisual;
            protoTo.IsVisualSpecified = protoFrom.IsVisualSpecified;
        }
    }
}
}
