// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.entity.bot.BotParametersData in improbable/entity/bot/bot_parameters.proto.

namespace Improbable.Entity.Bot
{
public struct BotParametersData : global::System.IEquatable<BotParametersData>
{
    public readonly float TargetSpeed;
    public readonly float TurnRate;
    public readonly float Power;

    public BotParametersData (float targetSpeed,
        float turnRate,
        float power)
    {
        TargetSpeed = targetSpeed;
        TurnRate = turnRate;
        Power = power;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is BotParametersData))
            return false;
        return Equals((BotParametersData) obj);
    }

    public static bool operator ==(BotParametersData obj1, BotParametersData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(BotParametersData obj1, BotParametersData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(BotParametersData obj)
    {
        return true
            && TargetSpeed.Equals(obj.TargetSpeed)
            && TurnRate.Equals(obj.TurnRate)
            && Power.Equals(obj.Power);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + TargetSpeed.GetHashCode();
        res = (res * 977) + TurnRate.GetHashCode();
        res = (res * 977) + Power.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class BotParametersDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Entity.Bot.BotParametersData, Schema.Improbable.Entity.Bot.BotParametersData>
{
    static readonly BotParametersDataHelper _instance = new BotParametersDataHelper();
    public static BotParametersDataHelper Instance { get { return _instance; } }
    private BotParametersDataHelper() {}

    public Schema.Improbable.Entity.Bot.BotParametersData ToProto(Improbable.Entity.Bot.BotParametersData data)
    {
        var proto = new Schema.Improbable.Entity.Bot.BotParametersData();
        proto.TargetSpeed = data.TargetSpeed;
        proto.TurnRate = data.TurnRate;
        proto.Power = data.Power;
        return proto;
    }

    //Shallow merge method
    public Improbable.Entity.Bot.BotParametersData MergeFromProto(Schema.Improbable.Entity.Bot.BotParametersData proto, bool[] statesToClear, Improbable.Entity.Bot.BotParametersData data)
    {
        return new Improbable.Entity.Bot.BotParametersData(
            proto.TargetSpeedSpecified ? proto.TargetSpeed : data.TargetSpeed,
            proto.TurnRateSpecified ? proto.TurnRate : data.TurnRate,
            proto.PowerSpecified ? proto.Power : data.Power
        );
    }

    public Improbable.Entity.Bot.BotParametersData FromProto(Schema.Improbable.Entity.Bot.BotParametersData proto)
    {
        return new Improbable.Entity.Bot.BotParametersData(
            proto.TargetSpeed,
            proto.TurnRate,
            proto.Power
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Entity.Bot.BotParametersData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Entity.Bot.BotParametersData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.TargetSpeedSpecified)
        {
            protoTo.TargetSpeed = protoFrom.TargetSpeed;
            protoTo.TargetSpeedSpecified = protoFrom.TargetSpeedSpecified;
        }
        if (protoFrom.TurnRateSpecified)
        {
            protoTo.TurnRate = protoFrom.TurnRate;
            protoTo.TurnRateSpecified = protoFrom.TurnRateSpecified;
        }
        if (protoFrom.PowerSpecified)
        {
            protoTo.Power = protoFrom.Power;
            protoTo.PowerSpecified = protoFrom.PowerSpecified;
        }
    }
}
}
