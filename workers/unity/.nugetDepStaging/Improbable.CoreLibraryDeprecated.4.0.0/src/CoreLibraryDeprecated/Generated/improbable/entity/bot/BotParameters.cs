// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.entity.bot.BotParametersData in improbable/entity/bot/bot_parameters.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Entity.Bot
{
[ReaderInterface]
[CanonicalName("improbable.entity.bot.BotParameters")]
public interface BotParametersReader : IEntityStateReader
{
    float TargetSpeed { get; }
    float TurnRate { get; }
    float Power { get; }

    event System.Action<float> TargetSpeedUpdated;
    event System.Action<float> TurnRateUpdated;
    event System.Action<float> PowerUpdated;
}

public interface IBotParametersUpdater : IEntityStateUpdater
{
    void FinishAndSend();
    IBotParametersUpdater TargetSpeed(float newValue);
    IBotParametersUpdater TurnRate(float newValue);
    IBotParametersUpdater Power(float newValue);
}

[WriterInterface]
[CanonicalName("improbable.entity.bot.BotParameters")]
public interface BotParametersWriter : BotParametersReader, IUpdateable<IBotParametersUpdater> { }

public class BotParameters : global::Improbable.Entity.State.StateBase<Improbable.Entity.Bot.BotParametersData, Schema.Improbable.Entity.Bot.BotParametersData>, BotParametersWriter, IBotParametersUpdater
{
    public BotParameters(global::Improbable.EntityId entityId, Improbable.Entity.Bot.BotParametersData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Entity.Bot.BotParametersDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(BotParameters));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    public float TargetSpeed { get { return Data.TargetSpeed; } }
    public float TurnRate { get { return Data.TurnRate; } }
    public float Power { get { return Data.Power; } }

    private readonly global::System.Collections.Generic.List<System.Action<float>> updatedCallbacksTargetSpeed =
        new global::System.Collections.Generic.List<System.Action<float>>();
    public event System.Action<float> TargetSpeedUpdated
    {
        add
        {
            updatedCallbacksTargetSpeed.Add(value);
            value(Data.TargetSpeed);
        }
        remove { updatedCallbacksTargetSpeed.Remove(value); }
    }

    private readonly global::System.Collections.Generic.List<System.Action<float>> updatedCallbacksTurnRate =
        new global::System.Collections.Generic.List<System.Action<float>>();
    public event System.Action<float> TurnRateUpdated
    {
        add
        {
            updatedCallbacksTurnRate.Add(value);
            value(Data.TurnRate);
        }
        remove { updatedCallbacksTurnRate.Remove(value); }
    }

    private readonly global::System.Collections.Generic.List<System.Action<float>> updatedCallbacksPower =
        new global::System.Collections.Generic.List<System.Action<float>>();
    public event System.Action<float> PowerUpdated
    {
        add
        {
            updatedCallbacksPower.Add(value);
            value(Data.Power);
        }
        remove { updatedCallbacksPower.Remove(value); }
    }

    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
        UnsubscribeEventHandler(visualizer, updatedCallbacksTargetSpeed);
        UnsubscribeEventHandler(visualizer, updatedCallbacksTurnRate);
        UnsubscribeEventHandler(visualizer, updatedCallbacksPower);
    }

    public IBotParametersUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new BotParametersUpdate(EntityId, new bool[0], new Schema.Improbable.Entity.Bot.BotParametersData());
            }
            return this;
        }
    }

    IBotParametersUpdater IBotParametersUpdater.TargetSpeed(float newValue)
    {
        if (Updater.Proto.TargetSpeedSpecified || !TargetSpeed.Equals(newValue))
        {
            Updater.Proto.TargetSpeed = newValue;
        }
        return this;
    }

    IBotParametersUpdater IBotParametersUpdater.TurnRate(float newValue)
    {
        if (Updater.Proto.TurnRateSpecified || !TurnRate.Equals(newValue))
        {
            Updater.Proto.TurnRate = newValue;
        }
        return this;
    }

    IBotParametersUpdater IBotParametersUpdater.Power(float newValue)
    {
        if (Updater.Proto.PowerSpecified || !Power.Equals(newValue))
        {
            Updater.Proto.Power = newValue;
        }
        return this;
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Entity.Bot.BotParametersData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        bool updatedTargetSpeed = update.TargetSpeedSpecified;
        anythingUpdated |= updatedTargetSpeed;
        if (updatedTargetSpeed) TriggerCallbacks(updatedCallbacksTargetSpeed, Data.TargetSpeed);

        bool updatedTurnRate = update.TurnRateSpecified;
        anythingUpdated |= updatedTurnRate;
        if (updatedTurnRate) TriggerCallbacks(updatedCallbacksTurnRate, Data.TurnRate);

        bool updatedPower = update.PowerSpecified;
        anythingUpdated |= updatedPower;
        if (updatedPower) TriggerCallbacks(updatedCallbacksPower, Data.Power);

        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Entity.Bot.BotParametersData stateUpdate)
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }
}

public class BotParametersUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Entity.Bot.BotParametersData, Schema.Improbable.Entity.Bot.BotParametersData>
{
    public const int STATE_UPDATE_FIELD_ID = 190128;
    public BotParametersUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Entity.Bot.BotParametersData proto)
        : base(entityId, statesToClear, Improbable.Entity.Bot.BotParametersDataHelper.Instance, proto, STATE_UPDATE_FIELD_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new BotParameters(entityId, GetData(), stateSender);
    }

    public static BotParametersUpdate ExtractFrom(global::Improbable.Protocol.StateUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Entity.Bot.BotParametersData>(proto.EntityState, STATE_UPDATE_FIELD_ID);
        return new BotParametersUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), null, protoState);
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = {};
}
}
