// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.game.g3.entity.player.PlayerOrientationControllerDataData in improbable/game/g3/entity/player/player_orientation_controller_data.proto.

namespace Improbable.Game.G3.Entity.Player
{
public struct PlayerOrientationControllerDataData : global::System.IEquatable<PlayerOrientationControllerDataData>
{
    public readonly float Azimuth;
    public readonly float Pitch;

    public PlayerOrientationControllerDataData (float azimuth,
        float pitch)
    {
        Azimuth = azimuth;
        Pitch = pitch;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is PlayerOrientationControllerDataData))
            return false;
        return Equals((PlayerOrientationControllerDataData) obj);
    }

    public static bool operator ==(PlayerOrientationControllerDataData obj1, PlayerOrientationControllerDataData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(PlayerOrientationControllerDataData obj1, PlayerOrientationControllerDataData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(PlayerOrientationControllerDataData obj)
    {
        return true
            && Azimuth.Equals(obj.Azimuth)
            && Pitch.Equals(obj.Pitch);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + Azimuth.GetHashCode();
        res = (res * 977) + Pitch.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class PlayerOrientationControllerDataDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData, Schema.Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData>
{
    static readonly PlayerOrientationControllerDataDataHelper _instance = new PlayerOrientationControllerDataDataHelper();
    public static PlayerOrientationControllerDataDataHelper Instance { get { return _instance; } }
    private PlayerOrientationControllerDataDataHelper() {}

    public Schema.Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData ToProto(Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData data)
    {
        var proto = new Schema.Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData();
        proto.Azimuth = data.Azimuth;
        proto.Pitch = data.Pitch;
        return proto;
    }

    //Shallow merge method
    public Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData MergeFromProto(Schema.Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData proto, bool[] statesToClear, Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData data)
    {
        return new Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData(
            proto.AzimuthSpecified ? proto.Azimuth : data.Azimuth,
            proto.PitchSpecified ? proto.Pitch : data.Pitch
        );
    }

    public Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData FromProto(Schema.Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData proto)
    {
        return new Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData(
            proto.Azimuth,
            proto.Pitch
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Game.G3.Entity.Player.PlayerOrientationControllerDataData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.AzimuthSpecified)
        {
            protoTo.Azimuth = protoFrom.Azimuth;
            protoTo.AzimuthSpecified = protoFrom.AzimuthSpecified;
        }
        if (protoFrom.PitchSpecified)
        {
            protoTo.Pitch = protoFrom.Pitch;
            protoTo.PitchSpecified = protoFrom.PitchSpecified;
        }
    }
}
}
