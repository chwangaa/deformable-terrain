// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelib.metrics.ClientPhysicsPingSent in improbable/corelib/metrics/client_physics_latency.proto.

namespace Improbable.Corelib.Metrics
{
public struct ClientPhysicsPingSent : global::System.IEquatable<ClientPhysicsPingSent>
{
    public readonly int TimestampMillis;

    public ClientPhysicsPingSent (int timestampMillis)
    {
        TimestampMillis = timestampMillis;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is ClientPhysicsPingSent))
            return false;
        return Equals((ClientPhysicsPingSent) obj);
    }

    public static bool operator ==(ClientPhysicsPingSent obj1, ClientPhysicsPingSent obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(ClientPhysicsPingSent obj1, ClientPhysicsPingSent obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(ClientPhysicsPingSent obj)
    {
        return true
            && TimestampMillis.Equals(obj.TimestampMillis);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + TimestampMillis.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class ClientPhysicsPingSentHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelib.Metrics.ClientPhysicsPingSent, Schema.Improbable.Corelib.Metrics.ClientPhysicsPingSent>
{
    static readonly ClientPhysicsPingSentHelper _instance = new ClientPhysicsPingSentHelper();
    public static ClientPhysicsPingSentHelper Instance { get { return _instance; } }
    private ClientPhysicsPingSentHelper() {}

    public Schema.Improbable.Corelib.Metrics.ClientPhysicsPingSent ToProto(Improbable.Corelib.Metrics.ClientPhysicsPingSent data)
    {
        var proto = new Schema.Improbable.Corelib.Metrics.ClientPhysicsPingSent();
        proto.TimestampMillis = data.TimestampMillis;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelib.Metrics.ClientPhysicsPingSent MergeFromProto(Schema.Improbable.Corelib.Metrics.ClientPhysicsPingSent proto, bool[] statesToClear, Improbable.Corelib.Metrics.ClientPhysicsPingSent data)
    {
        return new Improbable.Corelib.Metrics.ClientPhysicsPingSent(
            proto.TimestampMillisSpecified ? proto.TimestampMillis : data.TimestampMillis
        );
    }

    public Improbable.Corelib.Metrics.ClientPhysicsPingSent FromProto(Schema.Improbable.Corelib.Metrics.ClientPhysicsPingSent proto)
    {
        return new Improbable.Corelib.Metrics.ClientPhysicsPingSent(
            proto.TimestampMillis
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelib.Metrics.ClientPhysicsPingSent protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelib.Metrics.ClientPhysicsPingSent protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.TimestampMillisSpecified)
        {
            protoTo.TimestampMillis = protoFrom.TimestampMillis;
            protoTo.TimestampMillisSpecified = protoFrom.TimestampMillisSpecified;
        }
    }
}
}
