// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.entity.physical.PositionData in improbable/entity/physical/position.proto.

namespace Improbable.Entity.Physical
{
public struct PositionData : global::System.IEquatable<PositionData>
{
    public readonly float Timestamp;
    public readonly Improbable.Math.Coordinates Value;

    public PositionData (float timestamp,
        Improbable.Math.Coordinates value)
    {
        Timestamp = timestamp;
        Value = value;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is PositionData))
            return false;
        return Equals((PositionData) obj);
    }

    public static bool operator ==(PositionData obj1, PositionData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(PositionData obj1, PositionData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(PositionData obj)
    {
        return true
            && Timestamp.Equals(obj.Timestamp)
            && Value.Equals(obj.Value);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + Timestamp.GetHashCode();
        res = (res * 977) + Value.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class PositionDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Entity.Physical.PositionData, Schema.Improbable.Entity.Physical.PositionData>
{
    static readonly PositionDataHelper _instance = new PositionDataHelper();
    public static PositionDataHelper Instance { get { return _instance; } }
    private PositionDataHelper() {}

    public Schema.Improbable.Entity.Physical.PositionData ToProto(Improbable.Entity.Physical.PositionData data)
    {
        var proto = new Schema.Improbable.Entity.Physical.PositionData();
        proto.Timestamp = data.Timestamp;
        proto.Value = Improbable.Math.CoordinatesHelper.Instance.ToProto(data.Value);
        return proto;
    }

    //Shallow merge method
    public Improbable.Entity.Physical.PositionData MergeFromProto(Schema.Improbable.Entity.Physical.PositionData proto, bool[] statesToClear, Improbable.Entity.Physical.PositionData data)
    {
        return new Improbable.Entity.Physical.PositionData(
            proto.TimestampSpecified ? proto.Timestamp : data.Timestamp,
            proto.Value != null ? Improbable.Math.CoordinatesHelper.Instance.FromProto(proto.Value) : data.Value
        );
    }

    public Improbable.Entity.Physical.PositionData FromProto(Schema.Improbable.Entity.Physical.PositionData proto)
    {
        return new Improbable.Entity.Physical.PositionData(
            proto.Timestamp,
            Improbable.Math.CoordinatesHelper.Instance.FromProto(proto.Value)
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Entity.Physical.PositionData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Entity.Physical.PositionData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.TimestampSpecified)
        {
            protoTo.Timestamp = protoFrom.Timestamp;
            protoTo.TimestampSpecified = protoFrom.TimestampSpecified;
        }
        if (protoFrom.Value != null)
        {
            protoTo.Value = protoFrom.Value;
        }
    }
}
}
