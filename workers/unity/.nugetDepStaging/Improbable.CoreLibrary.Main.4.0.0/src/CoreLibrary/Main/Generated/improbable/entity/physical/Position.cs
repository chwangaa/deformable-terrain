// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.entity.physical.PositionData in improbable/entity/physical/position.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Entity.Physical
{
[ReaderInterface]
[CanonicalName("improbable.entity.physical.Position")]
public interface PositionReader : IEntityStateReader
{
    float Timestamp { get; }
    Improbable.Math.Coordinates Value { get; }

    event System.Action<float> TimestampUpdated;
    event System.Action<Improbable.Math.Coordinates> ValueUpdated;
}

public interface IPositionUpdater : IEntityStateUpdater
{
    void FinishAndSend();
    IPositionUpdater Timestamp(float newValue);
    IPositionUpdater Value(Improbable.Math.Coordinates newValue);
}

[WriterInterface]
[CanonicalName("improbable.entity.physical.Position")]
public interface PositionWriter : PositionReader, IUpdateable<IPositionUpdater> { }

public class Position : global::Improbable.Entity.State.StateBase<Improbable.Entity.Physical.PositionData, Schema.Improbable.Entity.Physical.PositionData>, PositionWriter, IPositionUpdater
{
    public Position(global::Improbable.EntityId entityId, Improbable.Entity.Physical.PositionData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Entity.Physical.PositionDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(Position));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    public float Timestamp { get { return Data.Timestamp; } }
    public Improbable.Math.Coordinates Value { get { return Data.Value; } }

    private readonly global::System.Collections.Generic.List<System.Action<float>> updatedCallbacksTimestamp =
        new global::System.Collections.Generic.List<System.Action<float>>();
    public event System.Action<float> TimestampUpdated
    {
        add
        {
            updatedCallbacksTimestamp.Add(value);
            value(Data.Timestamp);
        }
        remove { updatedCallbacksTimestamp.Remove(value); }
    }

    private readonly global::System.Collections.Generic.List<System.Action<Improbable.Math.Coordinates>> updatedCallbacksValue =
        new global::System.Collections.Generic.List<System.Action<Improbable.Math.Coordinates>>();
    public event System.Action<Improbable.Math.Coordinates> ValueUpdated
    {
        add
        {
            updatedCallbacksValue.Add(value);
            value(Data.Value);
        }
        remove { updatedCallbacksValue.Remove(value); }
    }

    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
        UnsubscribeEventHandler(visualizer, updatedCallbacksTimestamp);
        UnsubscribeEventHandler(visualizer, updatedCallbacksValue);
    }

    public IPositionUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new PositionUpdate(EntityId, new bool[0], new Schema.Improbable.Entity.Physical.PositionData());
            }
            return this;
        }
    }

    IPositionUpdater IPositionUpdater.Timestamp(float newValue)
    {
        if (Updater.Proto.TimestampSpecified || !Timestamp.Equals(newValue))
        {
            Updater.Proto.Timestamp = newValue;
        }
        return this;
    }

    IPositionUpdater IPositionUpdater.Value(Improbable.Math.Coordinates newValue)
    {
        if (Updater.Proto.Value != null || !Value.Equals(newValue))
        {
            Updater.Proto.Value = Improbable.Math.CoordinatesHelper.Instance.ToProto(newValue);
        }
        return this;
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Entity.Physical.PositionData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        bool updatedTimestamp = update.TimestampSpecified;
        anythingUpdated |= updatedTimestamp;
        if (updatedTimestamp) TriggerCallbacks(updatedCallbacksTimestamp, Data.Timestamp);

        bool updatedValue = update.Value != null;
        anythingUpdated |= updatedValue;
        if (updatedValue) TriggerCallbacks(updatedCallbacksValue, Data.Value);

        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Entity.Physical.PositionData stateUpdate)
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }
}

public class PositionUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Entity.Physical.PositionData, Schema.Improbable.Entity.Physical.PositionData>
{
    public const int STATE_UPDATE_FIELD_ID = 190121;
    public PositionUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Entity.Physical.PositionData proto)
        : base(entityId, statesToClear, Improbable.Entity.Physical.PositionDataHelper.Instance, proto, STATE_UPDATE_FIELD_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new Position(entityId, GetData(), stateSender);
    }

    public static PositionUpdate ExtractFrom(global::Improbable.Protocol.StateUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Entity.Physical.PositionData>(proto.EntityState, STATE_UPDATE_FIELD_ID);
        return new PositionUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), null, protoState);
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = {};
}
}
