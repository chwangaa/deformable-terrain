// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.entity.physical.RigidbodyEngineDataData in improbable/entity/physical/rigidbody_engine_data.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Entity.Physical
{
[ReaderInterface]
[CanonicalName("improbable.entity.physical.RigidbodyEngineData")]
public interface RigidbodyEngineDataReader : IEntityStateReader
{
    Improbable.Math.Vector3d Velocity { get; }
    Improbable.Math.Vector3d AngularVelocity { get; }
    Improbable.Math.Vector3d RelativeCentreOfMass { get; }

    event System.Action<Improbable.Math.Vector3d> VelocityUpdated;
    event System.Action<Improbable.Math.Vector3d> AngularVelocityUpdated;
    event System.Action<Improbable.Math.Vector3d> RelativeCentreOfMassUpdated;
}

public interface IRigidbodyEngineDataUpdater : IEntityStateUpdater
{
    void FinishAndSend();
    IRigidbodyEngineDataUpdater Velocity(Improbable.Math.Vector3d newValue);
    IRigidbodyEngineDataUpdater AngularVelocity(Improbable.Math.Vector3d newValue);
    IRigidbodyEngineDataUpdater RelativeCentreOfMass(Improbable.Math.Vector3d newValue);
}

[WriterInterface]
[CanonicalName("improbable.entity.physical.RigidbodyEngineData")]
public interface RigidbodyEngineDataWriter : RigidbodyEngineDataReader, IUpdateable<IRigidbodyEngineDataUpdater> { }

public class RigidbodyEngineData : global::Improbable.Entity.State.StateBase<Improbable.Entity.Physical.RigidbodyEngineDataData, Schema.Improbable.Entity.Physical.RigidbodyEngineDataData>, RigidbodyEngineDataWriter, IRigidbodyEngineDataUpdater
{
    public RigidbodyEngineData(global::Improbable.EntityId entityId, Improbable.Entity.Physical.RigidbodyEngineDataData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Entity.Physical.RigidbodyEngineDataDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(RigidbodyEngineData));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    public Improbable.Math.Vector3d Velocity { get { return Data.Velocity; } }
    public Improbable.Math.Vector3d AngularVelocity { get { return Data.AngularVelocity; } }
    public Improbable.Math.Vector3d RelativeCentreOfMass { get { return Data.RelativeCentreOfMass; } }

    private readonly global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>> updatedCallbacksVelocity =
        new global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>>();
    public event System.Action<Improbable.Math.Vector3d> VelocityUpdated
    {
        add
        {
            updatedCallbacksVelocity.Add(value);
            value(Data.Velocity);
        }
        remove { updatedCallbacksVelocity.Remove(value); }
    }

    private readonly global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>> updatedCallbacksAngularVelocity =
        new global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>>();
    public event System.Action<Improbable.Math.Vector3d> AngularVelocityUpdated
    {
        add
        {
            updatedCallbacksAngularVelocity.Add(value);
            value(Data.AngularVelocity);
        }
        remove { updatedCallbacksAngularVelocity.Remove(value); }
    }

    private readonly global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>> updatedCallbacksRelativeCentreOfMass =
        new global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>>();
    public event System.Action<Improbable.Math.Vector3d> RelativeCentreOfMassUpdated
    {
        add
        {
            updatedCallbacksRelativeCentreOfMass.Add(value);
            value(Data.RelativeCentreOfMass);
        }
        remove { updatedCallbacksRelativeCentreOfMass.Remove(value); }
    }

    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
        UnsubscribeEventHandler(visualizer, updatedCallbacksVelocity);
        UnsubscribeEventHandler(visualizer, updatedCallbacksAngularVelocity);
        UnsubscribeEventHandler(visualizer, updatedCallbacksRelativeCentreOfMass);
    }

    public IRigidbodyEngineDataUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new RigidbodyEngineDataUpdate(EntityId, new bool[0], new Schema.Improbable.Entity.Physical.RigidbodyEngineDataData());
            }
            return this;
        }
    }

    IRigidbodyEngineDataUpdater IRigidbodyEngineDataUpdater.Velocity(Improbable.Math.Vector3d newValue)
    {
        if (Updater.Proto.Velocity != null || !Velocity.Equals(newValue))
        {
            Updater.Proto.Velocity = Improbable.Math.Vector3dHelper.Instance.ToProto(newValue);
        }
        return this;
    }

    IRigidbodyEngineDataUpdater IRigidbodyEngineDataUpdater.AngularVelocity(Improbable.Math.Vector3d newValue)
    {
        if (Updater.Proto.AngularVelocity != null || !AngularVelocity.Equals(newValue))
        {
            Updater.Proto.AngularVelocity = Improbable.Math.Vector3dHelper.Instance.ToProto(newValue);
        }
        return this;
    }

    IRigidbodyEngineDataUpdater IRigidbodyEngineDataUpdater.RelativeCentreOfMass(Improbable.Math.Vector3d newValue)
    {
        if (Updater.Proto.RelativeCentreOfMass != null || !RelativeCentreOfMass.Equals(newValue))
        {
            Updater.Proto.RelativeCentreOfMass = Improbable.Math.Vector3dHelper.Instance.ToProto(newValue);
        }
        return this;
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Entity.Physical.RigidbodyEngineDataData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        bool updatedVelocity = update.Velocity != null;
        anythingUpdated |= updatedVelocity;
        if (updatedVelocity) TriggerCallbacks(updatedCallbacksVelocity, Data.Velocity);

        bool updatedAngularVelocity = update.AngularVelocity != null;
        anythingUpdated |= updatedAngularVelocity;
        if (updatedAngularVelocity) TriggerCallbacks(updatedCallbacksAngularVelocity, Data.AngularVelocity);

        bool updatedRelativeCentreOfMass = update.RelativeCentreOfMass != null;
        anythingUpdated |= updatedRelativeCentreOfMass;
        if (updatedRelativeCentreOfMass) TriggerCallbacks(updatedCallbacksRelativeCentreOfMass, Data.RelativeCentreOfMass);

        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Entity.Physical.RigidbodyEngineDataData stateUpdate)
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }
}

public class RigidbodyEngineDataUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Entity.Physical.RigidbodyEngineDataData, Schema.Improbable.Entity.Physical.RigidbodyEngineDataData>
{
    public const int STATE_UPDATE_FIELD_ID = 190123;
    public RigidbodyEngineDataUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Entity.Physical.RigidbodyEngineDataData proto)
        : base(entityId, statesToClear, Improbable.Entity.Physical.RigidbodyEngineDataDataHelper.Instance, proto, STATE_UPDATE_FIELD_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new RigidbodyEngineData(entityId, GetData(), stateSender);
    }

    public static RigidbodyEngineDataUpdate ExtractFrom(global::Improbable.Protocol.StateUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Entity.Physical.RigidbodyEngineDataData>(proto.EntityState, STATE_UPDATE_FIELD_ID);
        return new RigidbodyEngineDataUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), null, protoState);
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = {};
}
}
