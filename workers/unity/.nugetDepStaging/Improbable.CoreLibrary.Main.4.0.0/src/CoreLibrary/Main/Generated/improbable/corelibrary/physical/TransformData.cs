// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelibrary.physical.TransformData in improbable/corelibrary/physical/transform.proto.

namespace Improbable.Corelibrary.Physical
{
public struct TransformData : global::System.IEquatable<TransformData>
{
    public readonly float Timestamp;
    public readonly Improbable.Math.Coordinates Position;
    public readonly Improbable.Corelib.Math.Quaternion Rotation;
    public readonly Improbable.Math.Coordinates? Pivot;

    public TransformData (float timestamp,
        Improbable.Math.Coordinates position,
        Improbable.Corelib.Math.Quaternion rotation,
        Improbable.Math.Coordinates? pivot)
    {
        Timestamp = timestamp;
        Position = position;
        Rotation = rotation;
        Pivot = pivot;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is TransformData))
            return false;
        return Equals((TransformData) obj);
    }

    public static bool operator ==(TransformData obj1, TransformData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(TransformData obj1, TransformData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(TransformData obj)
    {
        return true
            && Timestamp.Equals(obj.Timestamp)
            && Position.Equals(obj.Position)
            && Rotation.Equals(obj.Rotation)
            && global::Improbable.Util.Collections.CollectionUtil.OptionsEqual(Pivot, obj.Pivot);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + Timestamp.GetHashCode();
        res = (res * 977) + Position.GetHashCode();
        res = (res * 977) + Rotation.GetHashCode();
        res = (res * 977) + (Pivot != null ? Pivot.GetHashCode() : 0);
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class TransformDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelibrary.Physical.TransformData, Schema.Improbable.Corelibrary.Physical.TransformData>
{
    static readonly TransformDataHelper _instance = new TransformDataHelper();
    public static TransformDataHelper Instance { get { return _instance; } }
    private TransformDataHelper() {}

    public Schema.Improbable.Corelibrary.Physical.TransformData ToProto(Improbable.Corelibrary.Physical.TransformData data)
    {
        var proto = new Schema.Improbable.Corelibrary.Physical.TransformData();
        proto.Timestamp = data.Timestamp;
        proto.Position = Improbable.Math.CoordinatesHelper.Instance.ToProto(data.Position);
        proto.Rotation = Improbable.Corelib.Math.QuaternionHelper.Instance.ToProto(data.Rotation);
        if (data.Pivot != null) proto.Pivot = Improbable.Math.CoordinatesHelper.Instance.ToProto(data.Pivot.Value);
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelibrary.Physical.TransformData MergeFromProto(Schema.Improbable.Corelibrary.Physical.TransformData proto, bool[] statesToClear, Improbable.Corelibrary.Physical.TransformData data)
    {
        return new Improbable.Corelibrary.Physical.TransformData(
            proto.TimestampSpecified ? proto.Timestamp : data.Timestamp,
            proto.Position != null ? Improbable.Math.CoordinatesHelper.Instance.FromProto(proto.Position) : data.Position,
            proto.Rotation != null ? Improbable.Corelib.Math.QuaternionHelper.Instance.FromProto(proto.Rotation) : data.Rotation,
            (proto.Pivot != null || statesToClear != null && statesToClear[0]) ? (proto.Pivot == null ? (Improbable.Math.Coordinates?) null : Improbable.Math.CoordinatesHelper.Instance.FromProto(proto.Pivot)) : data.Pivot
        );
    }

    public Improbable.Corelibrary.Physical.TransformData FromProto(Schema.Improbable.Corelibrary.Physical.TransformData proto)
    {
        return new Improbable.Corelibrary.Physical.TransformData(
            proto.Timestamp,
            Improbable.Math.CoordinatesHelper.Instance.FromProto(proto.Position),
            Improbable.Corelib.Math.QuaternionHelper.Instance.FromProto(proto.Rotation),
            proto.Pivot == null ? (Improbable.Math.Coordinates?) null : Improbable.Math.CoordinatesHelper.Instance.FromProto(proto.Pivot)
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelibrary.Physical.TransformData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelibrary.Physical.TransformData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.TimestampSpecified)
        {
            protoTo.Timestamp = protoFrom.Timestamp;
            protoTo.TimestampSpecified = protoFrom.TimestampSpecified;
        }
        if (protoFrom.Position != null)
        {
            protoTo.Position = protoFrom.Position;
        }
        if (protoFrom.Rotation != null)
        {
            protoTo.Rotation = protoFrom.Rotation;
        }
        if ((protoFrom.Pivot != null || statesToClearFrom != null && statesToClearFrom[0]))
        {
            statesToClearTo[0] = statesToClearFrom[0];
            protoTo.Pivot = protoFrom.Pivot;
        }
    }
}
}
