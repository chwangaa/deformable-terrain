// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelib.metrics.ClientPhysicsLatencyReplyData in improbable/corelib/metrics/client_physics_latency_reply.proto.

namespace Improbable.Corelib.Metrics
{
public struct ClientPhysicsLatencyReplyData : global::System.IEquatable<ClientPhysicsLatencyReplyData>
{


    public override bool Equals(object obj)
    {
        if (!(obj is ClientPhysicsLatencyReplyData))
            return false;
        return Equals((ClientPhysicsLatencyReplyData) obj);
    }

    public static bool operator ==(ClientPhysicsLatencyReplyData obj1, ClientPhysicsLatencyReplyData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(ClientPhysicsLatencyReplyData obj1, ClientPhysicsLatencyReplyData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(ClientPhysicsLatencyReplyData obj)
    {
        return true;
    }

    public override int GetHashCode()
    {
        int res = 1327;
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class ClientPhysicsLatencyReplyDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData, Schema.Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData>
{
    static readonly ClientPhysicsLatencyReplyDataHelper _instance = new ClientPhysicsLatencyReplyDataHelper();
    public static ClientPhysicsLatencyReplyDataHelper Instance { get { return _instance; } }
    private ClientPhysicsLatencyReplyDataHelper() {}

    public Schema.Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData ToProto(Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData data)
    {
        var proto = new Schema.Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData();
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData MergeFromProto(Schema.Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData proto, bool[] statesToClear, Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData data)
    {
        return new Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData(

        );
    }

    public Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData FromProto(Schema.Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData proto)
    {
        return new Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData(

        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelib.Metrics.ClientPhysicsLatencyReplyData protoTo, bool[] statesToClearTo)
    {
        protoTo.ClientPhysicsPingReceived.AddRange(protoFrom.ClientPhysicsPingReceived);
    }
}
}
