// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.entity.physical.RotationData in improbable/entity/physical/rotation.proto.

namespace Improbable.Entity.Physical
{
public struct RotationData : global::System.IEquatable<RotationData>
{
    public readonly float Timestamp;
    public readonly Improbable.Math.Vector3d Euler;

    public RotationData (float timestamp,
        Improbable.Math.Vector3d euler)
    {
        Timestamp = timestamp;
        Euler = euler;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is RotationData))
            return false;
        return Equals((RotationData) obj);
    }

    public static bool operator ==(RotationData obj1, RotationData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(RotationData obj1, RotationData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(RotationData obj)
    {
        return true
            && Timestamp.Equals(obj.Timestamp)
            && Euler.Equals(obj.Euler);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + Timestamp.GetHashCode();
        res = (res * 977) + Euler.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class RotationDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Entity.Physical.RotationData, Schema.Improbable.Entity.Physical.RotationData>
{
    static readonly RotationDataHelper _instance = new RotationDataHelper();
    public static RotationDataHelper Instance { get { return _instance; } }
    private RotationDataHelper() {}

    public Schema.Improbable.Entity.Physical.RotationData ToProto(Improbable.Entity.Physical.RotationData data)
    {
        var proto = new Schema.Improbable.Entity.Physical.RotationData();
        proto.Timestamp = data.Timestamp;
        proto.Euler = Improbable.Math.Vector3dHelper.Instance.ToProto(data.Euler);
        return proto;
    }

    //Shallow merge method
    public Improbable.Entity.Physical.RotationData MergeFromProto(Schema.Improbable.Entity.Physical.RotationData proto, bool[] statesToClear, Improbable.Entity.Physical.RotationData data)
    {
        return new Improbable.Entity.Physical.RotationData(
            proto.TimestampSpecified ? proto.Timestamp : data.Timestamp,
            proto.Euler != null ? Improbable.Math.Vector3dHelper.Instance.FromProto(proto.Euler) : data.Euler
        );
    }

    public Improbable.Entity.Physical.RotationData FromProto(Schema.Improbable.Entity.Physical.RotationData proto)
    {
        return new Improbable.Entity.Physical.RotationData(
            proto.Timestamp,
            Improbable.Math.Vector3dHelper.Instance.FromProto(proto.Euler)
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Entity.Physical.RotationData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Entity.Physical.RotationData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.TimestampSpecified)
        {
            protoTo.Timestamp = protoFrom.Timestamp;
            protoTo.TimestampSpecified = protoFrom.TimestampSpecified;
        }
        if (protoFrom.Euler != null)
        {
            protoTo.Euler = protoFrom.Euler;
        }
    }
}
}
