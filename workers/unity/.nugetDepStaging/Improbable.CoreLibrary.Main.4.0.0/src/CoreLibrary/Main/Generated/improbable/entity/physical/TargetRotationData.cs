// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.entity.physical.TargetRotationData in improbable/entity/physical/target_rotation.proto.

namespace Improbable.Entity.Physical
{
public struct TargetRotationData : global::System.IEquatable<TargetRotationData>
{
    public readonly Improbable.Math.Vector3d Euler;

    public TargetRotationData (Improbable.Math.Vector3d euler)
    {
        Euler = euler;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is TargetRotationData))
            return false;
        return Equals((TargetRotationData) obj);
    }

    public static bool operator ==(TargetRotationData obj1, TargetRotationData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(TargetRotationData obj1, TargetRotationData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(TargetRotationData obj)
    {
        return true
            && Euler.Equals(obj.Euler);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + Euler.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class TargetRotationDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Entity.Physical.TargetRotationData, Schema.Improbable.Entity.Physical.TargetRotationData>
{
    static readonly TargetRotationDataHelper _instance = new TargetRotationDataHelper();
    public static TargetRotationDataHelper Instance { get { return _instance; } }
    private TargetRotationDataHelper() {}

    public Schema.Improbable.Entity.Physical.TargetRotationData ToProto(Improbable.Entity.Physical.TargetRotationData data)
    {
        var proto = new Schema.Improbable.Entity.Physical.TargetRotationData();
        proto.Euler = Improbable.Math.Vector3dHelper.Instance.ToProto(data.Euler);
        return proto;
    }

    //Shallow merge method
    public Improbable.Entity.Physical.TargetRotationData MergeFromProto(Schema.Improbable.Entity.Physical.TargetRotationData proto, bool[] statesToClear, Improbable.Entity.Physical.TargetRotationData data)
    {
        return new Improbable.Entity.Physical.TargetRotationData(
            proto.Euler != null ? Improbable.Math.Vector3dHelper.Instance.FromProto(proto.Euler) : data.Euler
        );
    }

    public Improbable.Entity.Physical.TargetRotationData FromProto(Schema.Improbable.Entity.Physical.TargetRotationData proto)
    {
        return new Improbable.Entity.Physical.TargetRotationData(
            Improbable.Math.Vector3dHelper.Instance.FromProto(proto.Euler)
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Entity.Physical.TargetRotationData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Entity.Physical.TargetRotationData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.Euler != null)
        {
            protoTo.Euler = protoFrom.Euler;
        }
    }
}
}
