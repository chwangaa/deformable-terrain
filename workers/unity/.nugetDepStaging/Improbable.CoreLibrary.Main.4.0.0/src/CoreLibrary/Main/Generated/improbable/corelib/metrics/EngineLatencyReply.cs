// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelib.metrics.EngineLatencyReplyData in improbable/corelib/metrics/engine_latency_reply.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Corelib.Metrics
{
[ReaderInterface]
[CanonicalName("improbable.corelib.metrics.EngineLatencyReply")]
public interface EngineLatencyReplyReader : IEntityStateReader
{

    event System.Action<Improbable.Corelib.Metrics.EnginePingReceived> EnginePingReceived;
}

public interface IEngineLatencyReplyUpdater : IEntityStateUpdater
{
    void FinishAndSend();
    IEngineLatencyReplyUpdater TriggerEnginePingReceived(
        int receivedPingTimestampMillis);
}

[WriterInterface]
[CanonicalName("improbable.corelib.metrics.EngineLatencyReply")]
public interface EngineLatencyReplyWriter : EngineLatencyReplyReader, IUpdateable<IEngineLatencyReplyUpdater> { }

public class EngineLatencyReply : global::Improbable.Entity.State.StateBase<Improbable.Corelib.Metrics.EngineLatencyReplyData, Schema.Improbable.Corelib.Metrics.EngineLatencyReplyData>, EngineLatencyReplyWriter, IEngineLatencyReplyUpdater
{
    public EngineLatencyReply(global::Improbable.EntityId entityId, Improbable.Corelib.Metrics.EngineLatencyReplyData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Corelib.Metrics.EngineLatencyReplyDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(EngineLatencyReply));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    
    private readonly global::System.Collections.Generic.List<System.Action<Improbable.Corelib.Metrics.EnginePingReceived>> eventCallbacksEnginePingReceived =
        new global::System.Collections.Generic.List<System.Action<Improbable.Corelib.Metrics.EnginePingReceived>>();
    public event System.Action<Improbable.Corelib.Metrics.EnginePingReceived> EnginePingReceived
    {
        add { eventCallbacksEnginePingReceived.Add(value); }
        remove { eventCallbacksEnginePingReceived.Remove(value); }
    }

    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
        UnsubscribeEventHandler(visualizer, eventCallbacksEnginePingReceived);
    }

    public IEngineLatencyReplyUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new EngineLatencyReplyUpdate(EntityId, new bool[0], new Schema.Improbable.Corelib.Metrics.EngineLatencyReplyData());
            }
            return this;
        }
    }

    global::System.Collections.Generic.IList<Improbable.Corelib.Metrics.EnginePingReceived> triggeredEnginePingReceived = new global::System.Collections.Generic.List<Improbable.Corelib.Metrics.EnginePingReceived>();
    IEngineLatencyReplyUpdater IEngineLatencyReplyUpdater.TriggerEnginePingReceived(
        int receivedPingTimestampMillis)
    {
        var eventData = new Improbable.Corelib.Metrics.EnginePingReceived(
            receivedPingTimestampMillis);
        triggeredEnginePingReceived.Add(eventData);
        Updater.Proto.EnginePingReceived.Add(Improbable.Corelib.Metrics.EnginePingReceivedHelper.Instance.ToProto(eventData));
        return this;
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Corelib.Metrics.EngineLatencyReplyData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Corelib.Metrics.EngineLatencyReplyData stateUpdate)
    {
        bool anythingUpdated = false;
        bool updatedEnginePingReceived = stateUpdate.EnginePingReceived.Count > 0;
        TriggerEventCallbacks(eventCallbacksEnginePingReceived, stateUpdate.EnginePingReceived, Improbable.Corelib.Metrics.EnginePingReceivedHelper.Instance);
        anythingUpdated |= updatedEnginePingReceived;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        bool updatedEnginePingReceived = triggeredEnginePingReceived.Count > 0;
        TriggerEventCallbacks(eventCallbacksEnginePingReceived, triggeredEnginePingReceived);
        if (triggeredEnginePingReceived != null) triggeredEnginePingReceived.Clear();
        anythingUpdated |= updatedEnginePingReceived;
        return anythingUpdated;
    }
}

public class EngineLatencyReplyUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Corelib.Metrics.EngineLatencyReplyData, Schema.Improbable.Corelib.Metrics.EngineLatencyReplyData>
{
    public const int STATE_UPDATE_FIELD_ID = 190103;
    public EngineLatencyReplyUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Corelib.Metrics.EngineLatencyReplyData proto)
        : base(entityId, statesToClear, Improbable.Corelib.Metrics.EngineLatencyReplyDataHelper.Instance, proto, STATE_UPDATE_FIELD_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new EngineLatencyReply(entityId, GetData(), stateSender);
    }

    public static EngineLatencyReplyUpdate ExtractFrom(global::Improbable.Protocol.StateUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Corelib.Metrics.EngineLatencyReplyData>(proto.EntityState, STATE_UPDATE_FIELD_ID);
        return new EngineLatencyReplyUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), null, protoState);
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = {};
}
}
