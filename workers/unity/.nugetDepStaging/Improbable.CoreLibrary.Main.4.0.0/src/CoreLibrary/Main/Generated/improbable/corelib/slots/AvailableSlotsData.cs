// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelib.slots.AvailableSlotsData in improbable/corelib/slots/available_slots.proto.

namespace Improbable.Corelib.Slots
{
public struct AvailableSlotsData : global::System.IEquatable<AvailableSlotsData>
{
    public readonly global::Improbable.Util.Collections.IReadOnlyList<string> Slots;

    public AvailableSlotsData (global::Improbable.Util.Collections.IReadOnlyList<string> slots)
    {
        Slots = slots;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is AvailableSlotsData))
            return false;
        return Equals((AvailableSlotsData) obj);
    }

    public static bool operator ==(AvailableSlotsData obj1, AvailableSlotsData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(AvailableSlotsData obj1, AvailableSlotsData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(AvailableSlotsData obj)
    {
        return true
            && global::Improbable.Util.Collections.CollectionUtil.ListsEqual(Slots, obj.Slots);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + (Slots != null ? Slots.GetHashCode() : 0);
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class AvailableSlotsDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelib.Slots.AvailableSlotsData, Schema.Improbable.Corelib.Slots.AvailableSlotsData>
{
    static readonly AvailableSlotsDataHelper _instance = new AvailableSlotsDataHelper();
    public static AvailableSlotsDataHelper Instance { get { return _instance; } }
    private AvailableSlotsDataHelper() {}

    public Schema.Improbable.Corelib.Slots.AvailableSlotsData ToProto(Improbable.Corelib.Slots.AvailableSlotsData data)
    {
        var proto = new Schema.Improbable.Corelib.Slots.AvailableSlotsData();
        global::Improbable.Tools.ToProto<string, string>(data.Slots, proto.Slots);
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelib.Slots.AvailableSlotsData MergeFromProto(Schema.Improbable.Corelib.Slots.AvailableSlotsData proto, bool[] statesToClear, Improbable.Corelib.Slots.AvailableSlotsData data)
    {
        return new Improbable.Corelib.Slots.AvailableSlotsData(
            (proto.Slots.Count > 0 || statesToClear != null && statesToClear[0]) ? global::Improbable.Tools.FromProto<string, string>(proto.Slots) : data.Slots
        );
    }

    public Improbable.Corelib.Slots.AvailableSlotsData FromProto(Schema.Improbable.Corelib.Slots.AvailableSlotsData proto)
    {
        return new Improbable.Corelib.Slots.AvailableSlotsData(
            global::Improbable.Tools.FromProto<string, string>(proto.Slots)
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelib.Slots.AvailableSlotsData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelib.Slots.AvailableSlotsData protoTo, bool[] statesToClearTo)
    {
        if ((protoFrom.Slots.Count > 0 || statesToClearFrom != null && statesToClearFrom[0]))
        {
            statesToClearTo[0] = statesToClearFrom[0];
            protoTo.Slots.Clear();
            protoTo.Slots.AddRange(protoFrom.Slots);
        }
    }
}
}
