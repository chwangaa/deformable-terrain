// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelib.metrics.ClientPhysicsPingReceived in improbable/corelib/metrics/client_physics_latency_reply.proto.

namespace Improbable.Corelib.Metrics
{
public struct ClientPhysicsPingReceived : global::System.IEquatable<ClientPhysicsPingReceived>
{
    public readonly int ReceivedPingTimestampMillis;

    public ClientPhysicsPingReceived (int receivedPingTimestampMillis)
    {
        ReceivedPingTimestampMillis = receivedPingTimestampMillis;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is ClientPhysicsPingReceived))
            return false;
        return Equals((ClientPhysicsPingReceived) obj);
    }

    public static bool operator ==(ClientPhysicsPingReceived obj1, ClientPhysicsPingReceived obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(ClientPhysicsPingReceived obj1, ClientPhysicsPingReceived obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(ClientPhysicsPingReceived obj)
    {
        return true
            && ReceivedPingTimestampMillis.Equals(obj.ReceivedPingTimestampMillis);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + ReceivedPingTimestampMillis.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class ClientPhysicsPingReceivedHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelib.Metrics.ClientPhysicsPingReceived, Schema.Improbable.Corelib.Metrics.ClientPhysicsPingReceived>
{
    static readonly ClientPhysicsPingReceivedHelper _instance = new ClientPhysicsPingReceivedHelper();
    public static ClientPhysicsPingReceivedHelper Instance { get { return _instance; } }
    private ClientPhysicsPingReceivedHelper() {}

    public Schema.Improbable.Corelib.Metrics.ClientPhysicsPingReceived ToProto(Improbable.Corelib.Metrics.ClientPhysicsPingReceived data)
    {
        var proto = new Schema.Improbable.Corelib.Metrics.ClientPhysicsPingReceived();
        proto.ReceivedPingTimestampMillis = data.ReceivedPingTimestampMillis;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelib.Metrics.ClientPhysicsPingReceived MergeFromProto(Schema.Improbable.Corelib.Metrics.ClientPhysicsPingReceived proto, bool[] statesToClear, Improbable.Corelib.Metrics.ClientPhysicsPingReceived data)
    {
        return new Improbable.Corelib.Metrics.ClientPhysicsPingReceived(
            proto.ReceivedPingTimestampMillisSpecified ? proto.ReceivedPingTimestampMillis : data.ReceivedPingTimestampMillis
        );
    }

    public Improbable.Corelib.Metrics.ClientPhysicsPingReceived FromProto(Schema.Improbable.Corelib.Metrics.ClientPhysicsPingReceived proto)
    {
        return new Improbable.Corelib.Metrics.ClientPhysicsPingReceived(
            proto.ReceivedPingTimestampMillis
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelib.Metrics.ClientPhysicsPingReceived protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelib.Metrics.ClientPhysicsPingReceived protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.ReceivedPingTimestampMillisSpecified)
        {
            protoTo.ReceivedPingTimestampMillis = protoFrom.ReceivedPingTimestampMillis;
            protoTo.ReceivedPingTimestampMillisSpecified = protoFrom.ReceivedPingTimestampMillisSpecified;
        }
    }
}
}
