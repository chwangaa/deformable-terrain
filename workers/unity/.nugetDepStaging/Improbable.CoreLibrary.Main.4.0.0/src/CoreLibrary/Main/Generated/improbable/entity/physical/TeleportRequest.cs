// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.entity.physical.TeleportRequestData in improbable/entity/physical/teleport_request.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Entity.Physical
{
[ReaderInterface]
[CanonicalName("improbable.entity.physical.TeleportRequest")]
public interface TeleportRequestReader : IEntityStateReader
{
    int RequestId { get; }
    Improbable.Math.Coordinates Position { get; }
    Improbable.Math.Vector3d Euler { get; }

    event System.Action<int> RequestIdUpdated;
    event System.Action<Improbable.Math.Coordinates> PositionUpdated;
    event System.Action<Improbable.Math.Vector3d> EulerUpdated;
}

public interface ITeleportRequestUpdater : IEntityStateUpdater
{
    void FinishAndSend();
    ITeleportRequestUpdater RequestId(int newValue);
    ITeleportRequestUpdater Position(Improbable.Math.Coordinates newValue);
    ITeleportRequestUpdater Euler(Improbable.Math.Vector3d newValue);
}

[WriterInterface]
[CanonicalName("improbable.entity.physical.TeleportRequest")]
public interface TeleportRequestWriter : TeleportRequestReader, IUpdateable<ITeleportRequestUpdater> { }

public class TeleportRequest : global::Improbable.Entity.State.StateBase<Improbable.Entity.Physical.TeleportRequestData, Schema.Improbable.Entity.Physical.TeleportRequestData>, TeleportRequestWriter, ITeleportRequestUpdater
{
    public TeleportRequest(global::Improbable.EntityId entityId, Improbable.Entity.Physical.TeleportRequestData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Entity.Physical.TeleportRequestDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(TeleportRequest));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    public int RequestId { get { return Data.RequestId; } }
    public Improbable.Math.Coordinates Position { get { return Data.Position; } }
    public Improbable.Math.Vector3d Euler { get { return Data.Euler; } }

    private readonly global::System.Collections.Generic.List<System.Action<int>> updatedCallbacksRequestId =
        new global::System.Collections.Generic.List<System.Action<int>>();
    public event System.Action<int> RequestIdUpdated
    {
        add
        {
            updatedCallbacksRequestId.Add(value);
            value(Data.RequestId);
        }
        remove { updatedCallbacksRequestId.Remove(value); }
    }

    private readonly global::System.Collections.Generic.List<System.Action<Improbable.Math.Coordinates>> updatedCallbacksPosition =
        new global::System.Collections.Generic.List<System.Action<Improbable.Math.Coordinates>>();
    public event System.Action<Improbable.Math.Coordinates> PositionUpdated
    {
        add
        {
            updatedCallbacksPosition.Add(value);
            value(Data.Position);
        }
        remove { updatedCallbacksPosition.Remove(value); }
    }

    private readonly global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>> updatedCallbacksEuler =
        new global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>>();
    public event System.Action<Improbable.Math.Vector3d> EulerUpdated
    {
        add
        {
            updatedCallbacksEuler.Add(value);
            value(Data.Euler);
        }
        remove { updatedCallbacksEuler.Remove(value); }
    }

    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
        UnsubscribeEventHandler(visualizer, updatedCallbacksRequestId);
        UnsubscribeEventHandler(visualizer, updatedCallbacksPosition);
        UnsubscribeEventHandler(visualizer, updatedCallbacksEuler);
    }

    public ITeleportRequestUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new TeleportRequestUpdate(EntityId, new bool[0], new Schema.Improbable.Entity.Physical.TeleportRequestData());
            }
            return this;
        }
    }

    ITeleportRequestUpdater ITeleportRequestUpdater.RequestId(int newValue)
    {
        if (Updater.Proto.RequestIdSpecified || !RequestId.Equals(newValue))
        {
            Updater.Proto.RequestId = newValue;
        }
        return this;
    }

    ITeleportRequestUpdater ITeleportRequestUpdater.Position(Improbable.Math.Coordinates newValue)
    {
        if (Updater.Proto.Position != null || !Position.Equals(newValue))
        {
            Updater.Proto.Position = Improbable.Math.CoordinatesHelper.Instance.ToProto(newValue);
        }
        return this;
    }

    ITeleportRequestUpdater ITeleportRequestUpdater.Euler(Improbable.Math.Vector3d newValue)
    {
        if (Updater.Proto.Euler != null || !Euler.Equals(newValue))
        {
            Updater.Proto.Euler = Improbable.Math.Vector3dHelper.Instance.ToProto(newValue);
        }
        return this;
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Entity.Physical.TeleportRequestData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        bool updatedRequestId = update.RequestIdSpecified;
        anythingUpdated |= updatedRequestId;
        if (updatedRequestId) TriggerCallbacks(updatedCallbacksRequestId, Data.RequestId);

        bool updatedPosition = update.Position != null;
        anythingUpdated |= updatedPosition;
        if (updatedPosition) TriggerCallbacks(updatedCallbacksPosition, Data.Position);

        bool updatedEuler = update.Euler != null;
        anythingUpdated |= updatedEuler;
        if (updatedEuler) TriggerCallbacks(updatedCallbacksEuler, Data.Euler);

        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Entity.Physical.TeleportRequestData stateUpdate)
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }
}

public class TeleportRequestUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Entity.Physical.TeleportRequestData, Schema.Improbable.Entity.Physical.TeleportRequestData>
{
    public const int STATE_UPDATE_FIELD_ID = 190127;
    public TeleportRequestUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Entity.Physical.TeleportRequestData proto)
        : base(entityId, statesToClear, Improbable.Entity.Physical.TeleportRequestDataHelper.Instance, proto, STATE_UPDATE_FIELD_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new TeleportRequest(entityId, GetData(), stateSender);
    }

    public static TeleportRequestUpdate ExtractFrom(global::Improbable.Protocol.StateUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Entity.Physical.TeleportRequestData>(proto.EntityState, STATE_UPDATE_FIELD_ID);
        return new TeleportRequestUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), null, protoState);
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = {};
}
}
