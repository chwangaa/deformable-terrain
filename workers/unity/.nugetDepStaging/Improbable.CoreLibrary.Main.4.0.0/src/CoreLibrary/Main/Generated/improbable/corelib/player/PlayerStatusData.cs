// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelib.player.PlayerStatusData in improbable/corelib/player/player_status.proto.

namespace Improbable.Corelib.Player
{
public struct PlayerStatusData : global::System.IEquatable<PlayerStatusData>
{
    public readonly bool IsConnected;

    public PlayerStatusData (bool isConnected)
    {
        IsConnected = isConnected;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is PlayerStatusData))
            return false;
        return Equals((PlayerStatusData) obj);
    }

    public static bool operator ==(PlayerStatusData obj1, PlayerStatusData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(PlayerStatusData obj1, PlayerStatusData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(PlayerStatusData obj)
    {
        return true
            && IsConnected.Equals(obj.IsConnected);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + IsConnected.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class PlayerStatusDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelib.Player.PlayerStatusData, Schema.Improbable.Corelib.Player.PlayerStatusData>
{
    static readonly PlayerStatusDataHelper _instance = new PlayerStatusDataHelper();
    public static PlayerStatusDataHelper Instance { get { return _instance; } }
    private PlayerStatusDataHelper() {}

    public Schema.Improbable.Corelib.Player.PlayerStatusData ToProto(Improbable.Corelib.Player.PlayerStatusData data)
    {
        var proto = new Schema.Improbable.Corelib.Player.PlayerStatusData();
        proto.IsConnected = data.IsConnected;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelib.Player.PlayerStatusData MergeFromProto(Schema.Improbable.Corelib.Player.PlayerStatusData proto, bool[] statesToClear, Improbable.Corelib.Player.PlayerStatusData data)
    {
        return new Improbable.Corelib.Player.PlayerStatusData(
            proto.IsConnectedSpecified ? proto.IsConnected : data.IsConnected
        );
    }

    public Improbable.Corelib.Player.PlayerStatusData FromProto(Schema.Improbable.Corelib.Player.PlayerStatusData proto)
    {
        return new Improbable.Corelib.Player.PlayerStatusData(
            proto.IsConnected
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelib.Player.PlayerStatusData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelib.Player.PlayerStatusData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.IsConnectedSpecified)
        {
            protoTo.IsConnected = protoFrom.IsConnected;
            protoTo.IsConnectedSpecified = protoFrom.IsConnectedSpecified;
        }
    }
}
}
