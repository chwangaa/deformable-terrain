// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.entity.physical.CollisionStateData in improbable/entity/physical/collision_state.proto.

namespace Improbable.Entity.Physical
{
public struct CollisionStateData : global::System.IEquatable<CollisionStateData>
{


    public override bool Equals(object obj)
    {
        if (!(obj is CollisionStateData))
            return false;
        return Equals((CollisionStateData) obj);
    }

    public static bool operator ==(CollisionStateData obj1, CollisionStateData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(CollisionStateData obj1, CollisionStateData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(CollisionStateData obj)
    {
        return true;
    }

    public override int GetHashCode()
    {
        int res = 1327;
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class CollisionStateDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Entity.Physical.CollisionStateData, Schema.Improbable.Entity.Physical.CollisionStateData>
{
    static readonly CollisionStateDataHelper _instance = new CollisionStateDataHelper();
    public static CollisionStateDataHelper Instance { get { return _instance; } }
    private CollisionStateDataHelper() {}

    public Schema.Improbable.Entity.Physical.CollisionStateData ToProto(Improbable.Entity.Physical.CollisionStateData data)
    {
        var proto = new Schema.Improbable.Entity.Physical.CollisionStateData();
        return proto;
    }

    //Shallow merge method
    public Improbable.Entity.Physical.CollisionStateData MergeFromProto(Schema.Improbable.Entity.Physical.CollisionStateData proto, bool[] statesToClear, Improbable.Entity.Physical.CollisionStateData data)
    {
        return new Improbable.Entity.Physical.CollisionStateData(

        );
    }

    public Improbable.Entity.Physical.CollisionStateData FromProto(Schema.Improbable.Entity.Physical.CollisionStateData proto)
    {
        return new Improbable.Entity.Physical.CollisionStateData(

        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Entity.Physical.CollisionStateData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Entity.Physical.CollisionStateData protoTo, bool[] statesToClearTo)
    {
        protoTo.Collision.AddRange(protoFrom.Collision);
    }
}
}
