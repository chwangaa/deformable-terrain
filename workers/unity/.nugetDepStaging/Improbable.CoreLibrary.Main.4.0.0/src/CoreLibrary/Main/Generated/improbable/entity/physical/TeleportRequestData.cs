// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.entity.physical.TeleportRequestData in improbable/entity/physical/teleport_request.proto.

namespace Improbable.Entity.Physical
{
public struct TeleportRequestData : global::System.IEquatable<TeleportRequestData>
{
    public readonly int RequestId;
    public readonly Improbable.Math.Coordinates Position;
    public readonly Improbable.Math.Vector3d Euler;

    public TeleportRequestData (int requestId,
        Improbable.Math.Coordinates position,
        Improbable.Math.Vector3d euler)
    {
        RequestId = requestId;
        Position = position;
        Euler = euler;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is TeleportRequestData))
            return false;
        return Equals((TeleportRequestData) obj);
    }

    public static bool operator ==(TeleportRequestData obj1, TeleportRequestData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(TeleportRequestData obj1, TeleportRequestData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(TeleportRequestData obj)
    {
        return true
            && RequestId.Equals(obj.RequestId)
            && Position.Equals(obj.Position)
            && Euler.Equals(obj.Euler);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + RequestId.GetHashCode();
        res = (res * 977) + Position.GetHashCode();
        res = (res * 977) + Euler.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class TeleportRequestDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Entity.Physical.TeleportRequestData, Schema.Improbable.Entity.Physical.TeleportRequestData>
{
    static readonly TeleportRequestDataHelper _instance = new TeleportRequestDataHelper();
    public static TeleportRequestDataHelper Instance { get { return _instance; } }
    private TeleportRequestDataHelper() {}

    public Schema.Improbable.Entity.Physical.TeleportRequestData ToProto(Improbable.Entity.Physical.TeleportRequestData data)
    {
        var proto = new Schema.Improbable.Entity.Physical.TeleportRequestData();
        proto.RequestId = data.RequestId;
        proto.Position = Improbable.Math.CoordinatesHelper.Instance.ToProto(data.Position);
        proto.Euler = Improbable.Math.Vector3dHelper.Instance.ToProto(data.Euler);
        return proto;
    }

    //Shallow merge method
    public Improbable.Entity.Physical.TeleportRequestData MergeFromProto(Schema.Improbable.Entity.Physical.TeleportRequestData proto, bool[] statesToClear, Improbable.Entity.Physical.TeleportRequestData data)
    {
        return new Improbable.Entity.Physical.TeleportRequestData(
            proto.RequestIdSpecified ? proto.RequestId : data.RequestId,
            proto.Position != null ? Improbable.Math.CoordinatesHelper.Instance.FromProto(proto.Position) : data.Position,
            proto.Euler != null ? Improbable.Math.Vector3dHelper.Instance.FromProto(proto.Euler) : data.Euler
        );
    }

    public Improbable.Entity.Physical.TeleportRequestData FromProto(Schema.Improbable.Entity.Physical.TeleportRequestData proto)
    {
        return new Improbable.Entity.Physical.TeleportRequestData(
            proto.RequestId,
            Improbable.Math.CoordinatesHelper.Instance.FromProto(proto.Position),
            Improbable.Math.Vector3dHelper.Instance.FromProto(proto.Euler)
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Entity.Physical.TeleportRequestData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Entity.Physical.TeleportRequestData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.RequestIdSpecified)
        {
            protoTo.RequestId = protoFrom.RequestId;
            protoTo.RequestIdSpecified = protoFrom.RequestIdSpecified;
        }
        if (protoFrom.Position != null)
        {
            protoTo.Position = protoFrom.Position;
        }
        if (protoFrom.Euler != null)
        {
            protoTo.Euler = protoFrom.Euler;
        }
    }
}
}
