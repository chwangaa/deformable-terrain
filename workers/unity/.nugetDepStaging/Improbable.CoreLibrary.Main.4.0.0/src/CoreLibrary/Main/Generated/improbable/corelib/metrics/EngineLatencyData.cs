// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelib.metrics.EngineLatencyData in improbable/corelib/metrics/engine_latency.proto.

namespace Improbable.Corelib.Metrics
{
public struct EngineLatencyData : global::System.IEquatable<EngineLatencyData>
{
    public readonly int RoundTripMillis;
    public readonly int RefreshPeriodMillis;

    public EngineLatencyData (int roundTripMillis,
        int refreshPeriodMillis)
    {
        RoundTripMillis = roundTripMillis;
        RefreshPeriodMillis = refreshPeriodMillis;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is EngineLatencyData))
            return false;
        return Equals((EngineLatencyData) obj);
    }

    public static bool operator ==(EngineLatencyData obj1, EngineLatencyData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(EngineLatencyData obj1, EngineLatencyData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(EngineLatencyData obj)
    {
        return true
            && RoundTripMillis.Equals(obj.RoundTripMillis)
            && RefreshPeriodMillis.Equals(obj.RefreshPeriodMillis);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + RoundTripMillis.GetHashCode();
        res = (res * 977) + RefreshPeriodMillis.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class EngineLatencyDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelib.Metrics.EngineLatencyData, Schema.Improbable.Corelib.Metrics.EngineLatencyData>
{
    static readonly EngineLatencyDataHelper _instance = new EngineLatencyDataHelper();
    public static EngineLatencyDataHelper Instance { get { return _instance; } }
    private EngineLatencyDataHelper() {}

    public Schema.Improbable.Corelib.Metrics.EngineLatencyData ToProto(Improbable.Corelib.Metrics.EngineLatencyData data)
    {
        var proto = new Schema.Improbable.Corelib.Metrics.EngineLatencyData();
        proto.RoundTripMillis = data.RoundTripMillis;
        proto.RefreshPeriodMillis = data.RefreshPeriodMillis;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelib.Metrics.EngineLatencyData MergeFromProto(Schema.Improbable.Corelib.Metrics.EngineLatencyData proto, bool[] statesToClear, Improbable.Corelib.Metrics.EngineLatencyData data)
    {
        return new Improbable.Corelib.Metrics.EngineLatencyData(
            proto.RoundTripMillisSpecified ? proto.RoundTripMillis : data.RoundTripMillis,
            proto.RefreshPeriodMillisSpecified ? proto.RefreshPeriodMillis : data.RefreshPeriodMillis
        );
    }

    public Improbable.Corelib.Metrics.EngineLatencyData FromProto(Schema.Improbable.Corelib.Metrics.EngineLatencyData proto)
    {
        return new Improbable.Corelib.Metrics.EngineLatencyData(
            proto.RoundTripMillis,
            proto.RefreshPeriodMillis
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelib.Metrics.EngineLatencyData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelib.Metrics.EngineLatencyData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.RoundTripMillisSpecified)
        {
            protoTo.RoundTripMillis = protoFrom.RoundTripMillis;
            protoTo.RoundTripMillisSpecified = protoFrom.RoundTripMillisSpecified;
        }
        if (protoFrom.RefreshPeriodMillisSpecified)
        {
            protoTo.RefreshPeriodMillis = protoFrom.RefreshPeriodMillis;
            protoTo.RefreshPeriodMillisSpecified = protoFrom.RefreshPeriodMillisSpecified;
        }
        protoTo.EnginePingSent.AddRange(protoFrom.EnginePingSent);
    }
}
}
